/*************************************************************************
Ryan Stevens
resteven52@gmail.com

analyze our current talent pool to ensure each project can be completed 
efficiently and effectively.
*************************************************************************/


/*Start by familiarizing yourself with the tables.*/
/*
SELECT * FROM employees;
SELECT * FROM projects;


/*What are the names of employees who have not chosen a project?*/
/*
SELECT employee_id, first_name, last_name
FROM employees
WHERE current_project IS NULL;


/*What are the names of projects that were not chosen by any employees?*/
/*
SELECT project_id, project_name
FROM projects
WHERE project_id NOT IN (
  SELECT current_project 
  FROM employees
  WHERE current_project IS NOT NULL
  );


/*What is the name of the project chosen by the most employees?*/
/*
SELECT projects.project_id, projects.project_name, COUNT(*)
FROM projects
JOIN employees
  ON projects.project_id = employees.current_project
WHERE current_project IS NOT NULL
GROUP BY employees.current_project
ORDER BY 3 DESC
LIMIT 1;


/*Which projects were chosen by multiple employees?*/
/*
SELECT projects.project_id, projects.project_name, COUNT(*) AS 'counts'
FROM projects
JOIN employees
  ON projects.project_id = employees.current_project
WHERE current_project IS NOT NULL 
GROUP BY employees.current_project
HAVING counts > 1
ORDER BY 3 DESC;


/*Each project needs at least 2 developers. How many available project 
positions are there for developers*/
/*
SELECT (COUNT(*)*2) - (
  SELECT COUNT(*)
  FROM employees 
  WHERE current_project IS NOT NULL
    AND position = 'Developer'
) AS 'dev_Count'
FROM projects;
/*this one is based off of the codecademy solution. find the total neded 
devs, and subtract from that the # of devs we have assigned currently*/


/*BONUS QUESTIONS: pairing with myers-briggs personalities*/


/*Which single personality is the most common across our employees?*/
/*
SELECT personality, COUNT(*) AS '#_personal'
FROM employees
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;


/*What are the names of projects chosen by employees with the most common 
personality type?*/
/*
SELECT DISTINCT projects.project_id, projects.project_name 
FROM projects
JOIN employees
ON employees.current_project = projects.project_id
WHERE personality = (
  SELECT personality
  FROM employees
  GROUP BY 1
  ORDER BY COUNT(*) DESC
  LIMIT 1
  )
  AND current_project IS NOT NULL
ORDER BY 1;


/*Find the personality type most represented by the group of employees 
with a selected project. What are names of those employees, the 
personality type, and the names of the project they’ve chosen?*/
/*
SELECT employees.first_name, employees.last_name, employees.personality,
  projects.project_name
FROM employees
JOIN projects
  ON employees.current_project = projects.project_id
WHERE employees.personality = (
  SELECT personality
  FROM employees
  WHERE current_project IS NOT NULL
  GROUP BY personality
  ORDER BY COUNT(personality) DESC
  LIMIT 1
);


/*find the # of each personality in each project*/
/*
SELECT current_project, personality, COUNT(*)
FROM employees
WHERE current_project IS NOT NULL
GROUP BY current_project, personality
ORDER BY current_project DESC;


/*find the personality of highest occurance in each project*/
/*
WITH p_counts AS (
  SELECT current_project, personality, COUNT(*) AS 'counts'
  FROM employees
  WHERE current_project IS NOT NULL
  GROUP BY current_project, personality
  ORDER BY current_project DESC
)
SELECT current_project, project_name, personality 
FROM p_counts
JOIN projects
  ON p_counts.current_project = projects.project_id
GROUP BY current_project
  HAVING counts = MAX(counts)
ORDER BY current_project;


/*Find each employee in each project with the personality with the 
highest occurance in that project. whew thats a mouthfull. Why does 
sqlite only have recursive iterators, I feel like a for loop would have 
made this infinitely easier. maybe this way is more efficient?*/
/*
WITH 
p_counts AS (
  SELECT current_project, personality, COUNT(*) AS 'counts'
  FROM employees
  WHERE current_project IS NOT NULL
  GROUP BY current_project, personality
  ORDER BY current_project DESC
) ,
max_p AS (
  SELECT current_project, project_name, personality 
  FROM p_counts
  JOIN projects
    ON p_counts.current_project = projects.project_id
  GROUP BY current_project
    HAVING counts = MAX(counts)
  ORDER BY current_project
)
SELECT employees.first_name, 
employees.last_name, 
employees.personality AS 'emp_personality',
max_p.personality AS 'pop_personality', 
max_p.project_name
FROM max_p
JOIN employees
  ON employees.current_project = max_p.current_project
    AND employees.personality = max_p.personality;


/*For each employee, provide their name, personality, the names of any 
projects they’ve chosen, and the number of incompatible co-workers.*/
/*
CREATE TABLE p_type_comp (
  p_type TEXT,
  p_incomp TEXT
);

INSERT INTO p_type_comp (p_type, p_incomp)
VALUES ('INFP', 'ISFP'), ('INFP', 'ESFP'), ('INFP', 'ISTP'), 
('INFP', 'ESTP'), ('INFP', 'ISFJ'), ('INFP', 'ESFJ'), ('INFP', 'ISTJ'),
('INFP', 'ESTJ'), ('ENFP', 'ISFP'), ('ENFP', 'ESFP'), ('ENFP', 'ISTP'), 
('ENFP', 'ESTP'), ('ENFP', 'ISFJ'), ('ENFP', 'ESFJ'), ('ENFP', 'ISTJ'), 
('ENFP', 'ESTJ'), ('INFJ', 'ISFP'), ('INFJ', 'ESFP'), ('INFJ', 'ISTP'), 
('INFJ', 'ESTP'), ('INFJ', 'ISFJ'), ('INFJ', 'ESFJ'), ('INFJ', 'ISTJ'), 
('INFJ', 'ESTJ'), ('ENFJ', 'ESFP'), ('ENFJ', 'ISTP'), ('ENFJ', 'ESTP'), 
('ENFJ', 'ISFJ'), ('ENFJ', 'ESFJ'), ('ENFJ', 'ISTJ'), ('ENFJ', 'ESTJ'), 
('ISFP', 'INFP'), ('ISFP', 'ENFP'), ('ISFP', 'INFJ'), ('ESFP', 'INFP'), 
('ESFP', 'ENFP'), ('ESFP', 'INFJ'), ('ESFP', 'ENFJ'), ('ISTP', 'INFP'), 
('ISTP', 'ENFP'), ('ISTP', 'INFJ'), ('ISTP', 'ENFJ'), ('ESTP', 'INFP'), 
('ESTP', 'ENFP'), ('ESTP', 'INFJ'), ('ESTP', 'ENFJ'), ('ISFJ', 'INFP'), 
('ISFJ', 'ENFP'), ('ISFJ', 'INFJ'), ('ISFJ', 'ENFJ'), ('ESFJ', 'INFP'), 
('ESFJ', 'ENFP'), ('ESFJ', 'INFJ'), ('ESFJ', 'ENFJ'), ('ISTJ', 'INFP'), 
('ISTJ', 'ENFP'), ('ISTJ', 'INFJ'), ('ISTJ', 'ENFJ'), ('ESTJ', 'INFP'), 
('ESTJ', 'ENFP'), ('ESTJ', 'INFJ'), ('ESTJ', 'ENFJ');


WITH emp_incomp AS (
  SELECT p_incomp
  FROM employees
  JOIN p_type_comp
    ON employees.personality = p_type_comp.p_type
  )
SELECT first_name, last_name, employees.personality, project_name, COUNT(*)
FROM employees
LEFT JOIN projects
  ON employees.current_project = projects.project_id
JOIN emp_incomp 
  ON employees.personality = emp_incomp.p_incomp
GROUP BY employee_id;


SELECT * FROM employees;
