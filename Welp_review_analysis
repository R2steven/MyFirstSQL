/*************************************************************************
Ryan Stevens
restevens52@gmail.com

use data from an exciting app called Welp and see how other people 
reviewed businesses. We will be working with two tables: places and 
reviews
*************************************************************************/


/*Check out the tables*/
/*
SELECT * 
FROM places;

SELECT * 
FROM reviews;


/*If each dollar sign ($) represents $10, how could you find all places 
that cost $20 or less?*/
/*
SELECT * 
FROM places 
WHERE LENGTH(price_point) <= 2;


/*What columns can be used to JOIN these two tables?*/
/*
SELECT *
FROM places
JOIN reviews
ON places.id = reviews.place_id;


/*Write a query to do an INNER JOIN on the two tables to show all reviews 
for restaurants that have at least one review.*/
/*
SELECT places.name, reviews.rating, reviews.note
FROM places
JOIN reviews
ON places.id = reviews.place_id;


/*display a log of reviews by selecting the following:
From the places table: name, average_rating
From the reviews table: username, rating, review_date, note*/
/*
SELECT places.name, 
  places.average_rating, 
  reviews.username, 
  reviews.rating, 
  reviews.review_date, 
  reviews.note
FROM places
JOIN reviews
ON places.id = reviews.place_id;


/*Now write a query to do a LEFT JOIN on the tables, selecting the same 
columns as the previous question.*/
/*
SELECT places.name, 
  places.average_rating, 
  reviews.username, 
  reviews.rating, 
  reviews.review_date, 
  reviews.note
FROM places
LEFT JOIN reviews
ON places.id = reviews.place_id;
/*places that dont have reviews show up since its an L JOIN instead of I 
JOIN*/


/*Write a query to find all the ids of places that currently do not have 
any reviews in our reviews table.*/
/*
SELECT places.id 
FROM places
LEFT JOIN reviews
ON places.id = reviews.place_id
WHERE reviews.place_id IS NULL;


/*Write a query using the WITH clause to select all the reviews that 
happened in 2020. JOIN the places to your WITH query to see a log of all 
reviews from 2020.*/
/*
WITH reviews_2020 AS (
  SELECT *
  FROM reviews
  WHERE strftime('%Y', review_date) = '2020'
)
SELECT *
FROM places
JOIN reviews_2020
ON places.id = reviews_2020.place_id;


/*Write a query that finds the reviewer with the most reviews that are 
BELOW the average rating for places.*/
/*
SELECT reviews.id, reviews.username, 
  COUNT(reviews.id) AS 'ratings_under_AVG'
FROM reviews
JOIN places
ON reviews.place_id = places.id
WHERE reviews.rating < places.average_rating
GROUP BY 2
ORDER BY 3 DESC
LIMIT 10;


/*Write a query that finds the reviewer with the highest reviews 
that are BELOW the average rating for places, and their negative review 
rate.*/
/*
WITH t_reviews AS (
  SELECT username, COUNT(*) AS 'tot_rev'
  FROM reviews
  GROUP BY 1
)
SELECT reviews.id, reviews.username, 
  COUNT(reviews.id) AS 'ratings_under_AVG',
  1.0*COUNT(reviews.id)/t_reviews.tot_rev AS 'negativity_rate'
FROM reviews
JOIN places
ON reviews.place_id = places.id
JOIN t_reviews
ON reviews.username = t_reviews.username
WHERE reviews.rating < places.average_rating
GROUP BY 2
ORDER BY 3 DESC
LIMIT 10;
*/
