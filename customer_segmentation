/**********************************************************************************
Ryan Stevens
restevens52@gmail.com

practice segmenting a users dataset for use in marketing campaigns
**********************************************************************************/


-- 1
-- What are the column names?
/*
SELECT *
FROM users
LIMIT 20;
*/

-- 2
-- Find the email addresses and birthdays of users whose 
-- birthday is between 1980-01-01 and 1989-12-31.
/*
SELECT email, birthday
FROM users
WHERE birthday BETWEEN '1980%' AND '1989-12-31'
ORDER BY birthday DESC;
*/

-- 3
-- Find the emails and creation date of users 
-- whose created_at date matches this condition.
/*
SELECT email, created_at
FROM users
WHERE created_at < '2017-05%'
ORDER BY created_at DESC;
*/

-- 4
-- Find the emails of the users who received the ‘bears’ test.
/*
SELECT email
FROM users
WHERE test = 'bears';
*/

-- 5
-- Find all the emails of all users who 
-- received a campaign on website BBB.
/*
SELECT email
FROM users
WHERE campaign LIKE 'BBB%';
*/

-- 6
-- Find all the emails of all users who received ad copy 2 in 
-- their campaign.
/*
SELECT email
FROM users
WHERE campaign LIKE '%-2';
*/

-- 7
-- Find the emails for all users who received both a campaign and a test. 
-- These users will have non-empty entries in the 
-- campaign and test columns.
/*
SELECT email
FROM users
WHERE campaign IS NOT NULL 
  AND test IS NOT NULL;
*/

-- 8
-- Challenge
-- One of the members of the marketing team had an idea of calculating
-- how old users were when they signed up.

/*casts date into float, subtract birthday, cast it as integer. the genius part is that it completely takes care of the 'has the month/day passed yet' case. inspired by this post: https://stackoverflow.com/a/17501785 by marcelo cantos.*/

/*
SELECT email, birthday, created_at, 
(CAST(strftime('%Y.%m%d',created_at)-strftime('%Y.%m%d',birthday)AS INTEGER)) AS Age
FROM users;
*/
